name: Release

on:
  push:
    branches:
      - main

concurrency: ${{ github.workflow }}-${{ github.ref }}

permissions:
  contents: write

jobs:
  is_release:
    name: Is release?
    runs-on: ubuntu-latest
    outputs:
      release: ${{ steps.version.outputs.release }}
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v3

      - name: Install pnpm
        uses: pnpm/action-setup@v3
        id: pnpm-install
        with:
          version: 9.5

      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          node-version: "18.x"
          registry-url: "https://registry.npmjs.org"
          cache: pnpm
          cache-dependency-path: pnpm-lock.yaml

      - name: Configure pnpm
        run: |
          pnpm config set auto-install-peers true
          pnpm config set exclude-links-from-lockfile true

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Check if new version
        id: version
        run: |
          IS_RELEASE=$(./.github/scripts/is_release.sh)
          echo "release=$IS_RELEASE" >> "$GITHUB_OUTPUT"

  changes:
    name: Repository changes
    needs: [is_release]
    if: needs.is_release.outputs.release == 'true'
    runs-on: ubuntu-latest
    outputs:
      js-sdk: ${{ steps.filter.outputs.js-sdk }}
      python-sdk: ${{ steps.filter.outputs.python-sdk }}
      cli: ${{ steps.filter.outputs.cli }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Get the last release
        id: last_release
        uses: cardinalby/git-get-release-action@v1
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          latest: true
          prerelease: false
          draft: false

      - name: Find changes since the last release
        uses: dorny/paths-filter@v2
        id: filter
        with:
          base: ${{ steps.last_release.outputs.tag_name }}
          filters: |
            js-sdk:
              - 'packages/js-sdk/src/**'
              - '.github/workflows/js_sdk_tests.yml'
            python-sdk:
              - 'packages/python-sdk/e2b/**'
              - '.github/workflows/python_sdk_tests.yml'
            cli:
              - 'packages/cli/src/**'
              - '.github/workflows/cli_tests.yml'

  python-tests:
    name: Python SDK Tests
    needs: [changes]
    if: needs.changes.outputs.python-sdk == 'true'
    uses: ./.github/workflows/python_sdk_tests.yml
    secrets: inherit

  js-tests:
    name: JS SDK Tests
    needs: [changes]
    if: needs.changes.outputs.js-sdk == 'true'
    uses: ./.github/workflows/js_sdk_tests.yml
    secrets: inherit

  cli-tests:
    name: CLI Tests
    needs: [changes]
    if: needs.changes.outputs.cli == 'true'
    uses: ./.github/workflows/cli_tests.yml
    secrets: inherit

  publish:
    name: Publish
    needs: [is_release, python-tests, js-tests, cli-tests]
    if: (!cancelled()) && !contains(needs.*.result, 'failure') && needs.is_release.outputs.release == 'true'
    uses: ./.github/workflows/publish_packages.yml
    secrets: inherit

  report-failure:
    needs: [python-tests, js-tests, cli-tests, publish]
    if: failure()
    name: Release Failed - Slack Notification
    runs-on: ubuntu-latest
    steps:
      - name: Release Failed - Slack Notification
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_COLOR: "#ff0000"
          SLACK_MESSAGE: ":here-we-go-again: :bob-the-destroyer: We need :fix-parrot: ASAP :pray:"
          SLACK_TITLE: Release Failed
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_CHANNEL: "monitoring-releases"
