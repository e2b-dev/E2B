# coding: utf-8

"""
    Devbook

    Devbook API  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from pydantic import BaseModel, Field, StrictBool, StrictStr


class SessionsGet200ResponseInner(BaseModel):
    """
    SessionsGet200ResponseInner
    """

    code_snippet_id: StrictStr = Field(
        ...,
        alias="codeSnippetID",
        description="Identifier of a code snippet which which is the environment associated",
    )
    edit_enabled: StrictBool = Field(
        ...,
        alias="editEnabled",
        description="Information if the session is a shared persistent edit session",
    )
    session_id: StrictStr = Field(
        ..., alias="sessionID", description="Identifier of the session"
    )
    client_id: StrictStr = Field(
        ..., alias="clientID", description="Identifier of the client"
    )
    __properties = ["codeSnippetID", "editEnabled", "sessionID", "clientID"]

    class Config:
        """Pydantic configuration"""

        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> SessionsGet200ResponseInner:
        """Create an instance of SessionsGet200ResponseInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True, exclude={}, exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> SessionsGet200ResponseInner:
        """Create an instance of SessionsGet200ResponseInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return SessionsGet200ResponseInner.parse_obj(obj)

        # raise errors for additional fields in the input
        for _key in obj.keys():
            if _key not in cls.__properties:
                raise ValueError(
                    "Error due to additional fields (not defined in SessionsGet200ResponseInner) in the input: "
                    + obj
                )

        _obj = SessionsGet200ResponseInner.parse_obj(
            {
                "code_snippet_id": obj.get("codeSnippetID"),
                "edit_enabled": obj.get("editEnabled"),
                "session_id": obj.get("sessionID"),
                "client_id": obj.get("clientID"),
            }
        )
        return _obj
