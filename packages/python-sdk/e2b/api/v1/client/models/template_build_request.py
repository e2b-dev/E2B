# coding: utf-8

"""
    E2B API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, Dict, Optional
from pydantic import BaseModel, Field, StrictStr, conint


class TemplateBuildRequest(BaseModel):
    """
    TemplateBuildRequest
    """

    alias: Optional[StrictStr] = Field(None, description="Alias of the template")
    dockerfile: StrictStr = Field(..., description="Dockerfile for the template")
    start_cmd: Optional[StrictStr] = Field(
        None,
        alias="startCmd",
        description="Start command to execute in the template after the build",
    )
    cpu_count: Optional[conint(strict=True, ge=1)] = Field(
        None, alias="cpuCount", description="CPU cores for the template"
    )
    memory_mb: Optional[conint(strict=True, ge=128)] = Field(
        None, alias="memoryMB", description="Memory limit for the template in MB"
    )
    additional_properties: Dict[str, Any] = {}
    __properties = ["alias", "dockerfile", "startCmd", "cpuCount", "memoryMB"]

    class Config:
        """Pydantic configuration"""

        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> TemplateBuildRequest:
        """Create an instance of TemplateBuildRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(
            by_alias=True, exclude={"additional_properties"}, exclude_none=True
        )
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> TemplateBuildRequest:
        """Create an instance of TemplateBuildRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return TemplateBuildRequest.parse_obj(obj)

        _obj = TemplateBuildRequest.parse_obj(
            {
                "alias": obj.get("alias"),
                "dockerfile": obj.get("dockerfile"),
                "start_cmd": obj.get("startCmd"),
                "cpu_count": obj.get("cpuCount"),
                "memory_mb": obj.get("memoryMB"),
            }
        )
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj
