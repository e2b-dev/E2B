# coding: utf-8

"""
    Devbook

    Devbook API

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations

import json
import pprint
import re  # noqa: F401

from pydantic import BaseModel, Field, StrictBool, StrictStr


class Session(BaseModel):
    """
    Session
    """

    code_snippet_id: StrictStr = Field(
        ...,
        alias="codeSnippetID",
        description="Identifier of a code snippet which which is the environment associated",
    )
    edit_enabled: StrictBool = Field(
        ...,
        alias="editEnabled",
        description="Information if the session is a shared persistent edit session",
    )
    session_id: StrictStr = Field(
        ..., alias="sessionID", description="Identifier of the session"
    )
    client_id: StrictStr = Field(
        ..., alias="clientID", description="Identifier of the client"
    )

    """Pydantic configuration"""

    class Config:
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Session:
        """Create an instance of Session from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True, exclude={}, exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> Session:
        """Create an instance of Session from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return Session.parse_obj(obj)

        # raise errors for additional fields in the input
        for _key in obj.keys():
            if _key not in ["codeSnippetID", "editEnabled", "sessionID", "clientID"]:
                raise ValueError(
                    "Error due to additional fields (not defined in Session) in the input: "
                    + obj
                )

        _obj = Session.parse_obj(obj)
        return _obj
