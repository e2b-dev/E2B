/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/health": {
    /** Health check */
    get: {
      responses: {
        /** Request was successful */
        200: unknown;
        401: components["responses"]["401"];
      };
    };
  };
  "/sandboxes": {
    /** List all running sandboxes */
    get: {
      responses: {
        /** Successfully returned all running sandboxes */
        200: {
          content: {
            "application/json": components["schemas"]["RunningSandboxes"][];
          };
        };
        400: components["responses"]["400"];
        401: components["responses"]["401"];
        500: components["responses"]["500"];
      };
    };
    /** Create a sandbox from the template */
    post: {
      responses: {
        /** The sandbox was created successfully */
        201: {
          content: {
            "application/json": components["schemas"]["Sandbox"];
          };
        };
        400: components["responses"]["400"];
        401: components["responses"]["401"];
        500: components["responses"]["500"];
      };
      requestBody: {
        content: {
          "application/json": components["schemas"]["NewSandbox"];
        };
      };
    };
  };
  "/sandboxes/{sandboxID}": {
    /** Kill a sandbox */
    delete: {
      parameters: {
        path: {
          sandboxID: components["parameters"]["sandboxID"];
        };
      };
      responses: {
        /** The sandbox was killed successfully */
        204: never;
        401: components["responses"]["401"];
        404: components["responses"]["404"];
        500: components["responses"]["500"];
      };
    };
  };
  "/sandboxes/{sandboxID}/refreshes": {
    /** Refresh the sandbox extending its time to live */
    post: {
      parameters: {
        path: {
          sandboxID: components["parameters"]["sandboxID"];
        };
      };
      responses: {
        /** Successfully refreshed the sandbox */
        204: never;
        401: components["responses"]["401"];
        404: components["responses"]["404"];
      };
      requestBody: {
        content: {
          "application/json": {
            /** @description Duration for which the sandbox should be kept alive in seconds */
            duration?: number;
          };
        };
      };
    };
  };
  "/templates": {
    /** List all templates */
    get: {
      responses: {
        /** Successfully returned all templates */
        200: {
          content: {
            "application/json": components["schemas"]["Template"][];
          };
        };
        401: components["responses"]["401"];
        500: components["responses"]["500"];
      };
    };
    /** Create a new template */
    post: {
      responses: {
        /** The build was accepted */
        202: {
          content: {
            "application/json": components["schemas"]["Template"];
          };
        };
        401: components["responses"]["401"];
        500: components["responses"]["500"];
      };
      requestBody: {
        content: {
          "application/json": components["schemas"]["TemplateBuildRequest"];
        };
      };
    };
  };
  "/templates/{templateID}": {
    /** Rebuild an template */
    post: {
      parameters: {
        path: {
          templateID: components["parameters"]["templateID"];
        };
      };
      responses: {
        /** The build was accepted */
        202: {
          content: {
            "application/json": components["schemas"]["Template"];
          };
        };
        401: components["responses"]["401"];
        500: components["responses"]["500"];
      };
      requestBody: {
        content: {
          "application/json": components["schemas"]["TemplateBuildRequest"];
        };
      };
    };
    /** Delete a template */
    delete: {
      parameters: {
        path: {
          templateID: components["parameters"]["templateID"];
        };
      };
      responses: {
        /** The template was deleted successfully */
        204: never;
        401: components["responses"]["401"];
        500: components["responses"]["500"];
      };
    };
  };
  "/templates/{templateID}/builds/{buildID}": {
    /** Start the build */
    post: {
      parameters: {
        path: {
          templateID: components["parameters"]["templateID"];
          buildID: components["parameters"]["buildID"];
        };
      };
      responses: {
        /** The build has started */
        202: unknown;
        401: components["responses"]["401"];
        500: components["responses"]["500"];
      };
    };
  };
  "/templates/{templateID}/builds/{buildID}/logs": {
    /** Add a build log */
    post: {
      parameters: {
        path: {
          templateID: components["parameters"]["templateID"];
          buildID: components["parameters"]["buildID"];
        };
      };
      responses: {
        /** Successfully added log */
        201: unknown;
        401: components["responses"]["401"];
        404: components["responses"]["404"];
      };
      requestBody: {
        content: {
          "application/json": {
            /** @description API secret */
            apiSecret: string;
            logs: string[];
          };
        };
      };
    };
  };
  "/templates/{templateID}/builds/{buildID}/status": {
    /** Get template build info */
    get: {
      parameters: {
        path: {
          templateID: components["parameters"]["templateID"];
          buildID: components["parameters"]["buildID"];
        };
        query: {
          /** Index of the starting build log that should be returned with the template */
          logsOffset?: number;
        };
      };
      responses: {
        /** Successfully returned the template */
        200: {
          content: {
            "application/json": components["schemas"]["TemplateBuild"];
          };
        };
        401: components["responses"]["401"];
        404: components["responses"]["404"];
        500: components["responses"]["500"];
      };
    };
  };
}

export interface components {
  schemas: {
    SandboxMetadata: { [key: string]: string };
    Sandbox: {
      /** @description Identifier of the template from which is the sandbox created */
      templateID: string;
      /** @description Identifier of the sandbox */
      sandboxID: string;
      /** @description Alias of the template */
      alias?: string;
      /** @description Identifier of the client */
      clientID: string;
    };
    RunningSandboxes: {
      /** @description Identifier of the template from which is the sandbox created */
      templateID: string;
      /** @description Alias of the template */
      alias?: string;
      /** @description Identifier of the sandbox */
      sandboxID: string;
      /** @description Identifier of the client */
      clientID: string;
      /**
       * Format: date-time
       * @description Time when the sandbox was started
       */
      startedAt: string;
      /** @description CPU cores for the sandbox */
      cpuCount: number;
      /** @description Memory limit for the sandbox in MB */
      memoryMB: number;
      metadata?: components["schemas"]["SandboxMetadata"];
    };
    NewSandbox: {
      /** @description Identifier of the required template */
      templateID: string;
      metadata?: components["schemas"]["SandboxMetadata"];
    };
    Template: {
      /** @description Identifier of the template */
      templateID: string;
      /** @description Identifier of the last successful build for given template */
      buildID: string;
      /** @description CPU cores for the sandbox */
      cpuCount: number;
      /** @description Memory limit for the sandbox in MB */
      memoryMB: number;
      /** @description Whether the template is public or only accessible by the team */
      public: boolean;
      /** @description Aliases of the template */
      aliases?: string[];
    } & {
      storageGB: unknown;
    };
    TemplateBuildRequest: {
      /** @description Alias of the template */
      alias?: string;
      /** @description Dockerfile for the template */
      dockerfile: string;
      /** @description Start command to execute in the template after the build */
      startCmd?: string;
      /** @description CPU cores for the template */
      cpuCount?: number;
      /** @description Memory limit for the template in MB */
      memoryMB?: number;
    };
    TemplateBuild: {
      /**
       * @description Build logs
       * @default []
       */
      logs: string[];
      /** @description Identifier of the template */
      templateID: string;
      /** @description Identifier of the build */
      buildID: string;
      /**
       * @description Status of the template
       * @enum {string}
       */
      status?: "building" | "ready" | "error";
    } & {
      finished: unknown;
    };
    Error: {
      /**
       * Format: int32
       * @description Error code
       */
      code: number;
      /** @description Error */
      message: string;
    };
  };
  responses: {
    /** Bad request */
    400: {
      content: {
        "application/json": components["schemas"]["Error"];
      };
    };
    /** Authentication error */
    401: {
      content: {
        "application/json": components["schemas"]["Error"];
      };
    };
    /** Not found */
    404: {
      content: {
        "application/json": components["schemas"]["Error"];
      };
    };
    /** Server error */
    500: {
      content: {
        "application/json": components["schemas"]["Error"];
      };
    };
  };
  parameters: {
    templateID: string;
    buildID: string;
    sandboxID: string;
  };
}

export interface operations {}

export interface external {}
